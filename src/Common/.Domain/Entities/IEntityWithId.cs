namespace Common.Domain.Entities;
/// <summary>
/// A single unit of relational data that can be identified by a primary key.
/// </summary>
/// <typeparam name="TId">The type of the entity's primary key.</typeparam>
public interface IEntityWithId<TId> : IEntity {
  //public interface IEntityWithId<TId> : IEntity where TId : IEquatable<TId> {
  TId Id { get; set; }
}


public static class IEntityWithIdExtensions {
  public static int GetHashCode<TId>(this IEntityWithId<TId> exn) where TId : IEquatable<TId> => IsTransient(exn) ? 0 : exn.Id.GetHashCode();

  /// <summary>
  /// Determine whether this entity is equal to another object.
  /// </summary>
  /// <param name="other">The object to compare to this entity when determining equality.</param>
  /// <returns>True if the other object is an EntityWithId, both entities are not null or
  /// transient, and both entities have the same Id value. Otherwise, false.</returns>
  public static bool Equals<TId>(this IEntityWithId<TId> exn, object other) where TId : IEquatable<TId> => exn.Equals(other as IEntityWithId<TId>);

  /// <summary>
  /// Determine whether this entity is equal to another entity.
  /// </summary>
  /// <param name="other">The entity to compare to this entity when determining equality.</param>
  /// <returns>True if the other entity is not null, neither entity is transient, and both
  /// entities share the same Id value.</returns>
  public static bool Equals<TId>(this IEntityWithId<TId> exn, IEntityWithId<TId> other) where TId : IEquatable<TId> {
    // Implements IEquatable(Of Intranet.Domain.Api.Entities.EntityWithId(Of TId)).Equals
    // instance is never equal to null
    if (other == null) return false;
    // when references are equal, they are the same object
    if (ReferenceEquals(exn, other)) return true;
    // when either object is transient or the id's are not equal, return false
    if (IsTransient(exn) || IsTransient(other) || (!exn.Id.Equals(other.Id))) return false;
    // when the id's are equal and neither object is transient
    // return true when one can be cast to the other
    // because this entity could be generated by a proxy
    var otherType = GetUnproxiedType(other);
    var thisType = GetUnproxiedType(exn);
    return thisType.IsAssignableFrom(otherType) || otherType.IsAssignableFrom(thisType);
  }

  private static bool IsTransient<TId>(IEntityWithId<TId> obj) where TId : IEquatable<TId> =>
    // an object is transient when its id is the default (null for strings or 0 for numbers)
    obj.Id.Equals(null);

  private static Type GetUnproxiedType<TId>(IEntityWithId<TId> exn) where TId : IEquatable<TId> => exn.GetType(); // return the unproxied type of the object
}
