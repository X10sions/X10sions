@page
@model ThisPageModel
@using Castle.DynamicLinqQueryBuilder
@using DynamicQueryBuilder
@using DynamicQueryBuilder.Models
@using DynamicQueryBuilder.Models.Enums
@using DynamicQueryBuilder.Interfaces
@using DynamicQueryBuilder.Utils
@using DynamicQueryBuilder.Utils.Extensions
@using DynamicQueryBuilder.Visitors
@using X10sions.Fake.Data
@using X10sions.Fake.Data.Enums
@using X10sions.Fake.Data.Models
@using Microsoft.AspNetCore.Authorization
@functions {
  [AllowAnonymous]
  public class ThisPageModel : PageModel {

    #region UI
    [BindProperty] public OrmTypes OrmType { get; set; }
    [BindProperty] public DbTypes DbType { get; set; }

    [BindProperty] public FakePerson Person { get; set; }
    [BindProperty] public FakeProject Project { get; set; }
    [BindProperty] public FakeProjectItem ProjectItem { get; set; }
    [BindProperty] public FakePriority Priority { get; set; }
    #endregion

    public ThisPageModel(LinqToDbDataConnections.Access_OleDb dbLinqToDb, EFCoreDbContexts.Access dbEfCore) {
      DbLinqToDb = dbLinqToDb;
      DbEfCore = dbEfCore;
    }

    public LinqToDbDataConnections.Access_OleDb DbLinqToDb { get; }
    public EFCoreDbContexts.Access DbEfCore { get; }

    public void OnGet() {
      //  var products = cn.QueryBuilder($@"
      //SELECT ProductId, Name, ListPrice, Weight
      //FROM [Product]
      //WHERE [ListPrice] <= {maxPrice}
      //AND [Weight] <= {maxWeight}
      //AND [Name] LIKE {search}
      //ORDER BY ProductId").Query<FakeProduct>();


      var myFilter = new QueryBuilderFilterRule() {
          Condition = "and",
          Rules = new List<QueryBuilderFilterRule>() {
          new QueryBuilderFilterRule() {
            Condition = "and",
            Field = nameof(FakePerson.ActualFirstName),
            Id = nameof(FakePerson.ActualFirstName),
            Input = "NA",
            Operator = "equal",
            Type = "string",
            Value = new [] { "jane" }
          }
        }
        };
      var myFilterResult = DbLinqToDb.Person.BuildQuery<FakePerson>(myFilter).ToList();

      var predicate = myFilter.BuildPredicate<FakePerson>(new BuildExpressionOptions() { ParseDatesAsUtc = true });
      var predicateResult = DbLinqToDb.Person.Where(predicate).ToList();

      //IQueryable<FakePerson> queryPersons;
      var myOpts = new DynamicQueryOptions {
          Filters = new List<Filter>()        {
          new Filter        {
            PropertyName = nameof(FakePerson.ActualFirstName),
            Operator = FilterOperation.LessThan,
            Value =  "foo"
          }
        },
          SortOptions = new List<SortOption> {
          new SortOption{
            CaseSensitive = false,
            PropertyName = nameof(FakePerson.LastName),
            SortingDirection = SortingDirection.Asc
          },
          new SortOption{
            CaseSensitive = false,
            PropertyName = nameof(FakePerson.ActualFirstName),
            SortingDirection = SortingDirection.Desc
          }
        },
          PaginationOption = new PaginationOption {
            Count = 10,
            Offset = 0,
            AssignDataSetCount = true
          }
        };

      //const string QUERY = "o=In|AndAlso&p=referenceNumber&v=+90&o=Equals|AndAlso&p=integrationName&v=Shopify_303&s=orderCreatedAt,desc&offset=0&count=25";
      //var qsParser = QueryStringParser.GetAllParameterWithValue(QUERY)
      //var parameterCount = qsParser.Count();

      IQueryable<FakePerson> filterPersons = DbLinqToDb.Person.AsQueryable().ApplyFilters(myOpts);
      var persons = filterPersons.ToList();

    }

    public List<FakePerson> PersonList { get; }

    public async Task<IActionResult> OnPostPerson() {
      if (!ModelState.IsValid) {
        return Page();
      }
      return Page();
    }

    public async Task<IActionResult> OnPostProject() {
      if (!ModelState.IsValid) {
        return Page();
      }
      return Page();
    }

    public async Task<IActionResult> OnPostProjectItem() {
      if (!ModelState.IsValid) {
        return Page();
      }
      return Page();
    }

    public async Task<IActionResult> OnPostPriority() {
      if (!ModelState.IsValid) {
        return Page();
      }
      return Page();
    }

  }

}

<form>
  <div class="input-group">
    <select asp-for="OrmType" class="form-select" asp-items="Html.GetEnumSelectList<OrmTypes>()"></select>
    <label asp-for="OrmType" class="form-label">ORM Type</label>
  </div>

  <div class="form-floating">
    <select asp-for="DbType" class="form-select" asp-items="Html.GetEnumSelectList<DbTypes>()"></select>
    <label asp-for="DbType">DB Type</label>
  </div>

  <button type="submit" class="btn btn-primary">Submit</button>

</form>

<form>
  <h1>FakePerson</h1>
  <input type="submit" />
  <table>
    <thead></thead>
    <tbody>
      @foreach (var p in Model.PersonList) {
        <tr>
          <td>@p.Id</td>
          <td>@p.FirstName</td>
          <td>@p.LastName</td>
        </tr>
      }
    </tbody>
  </table>

</form>

<form>
  <h1>FakeProject</h1>
  <input type="submit" />
</form>

<form>
  <h1>FakeProjectItem</h1>

  <input type="submit" />
</form>

<form>
  <h1>FakePriority</h1>

  <input type="submit" />
</form>



<div id="builder"></div>

<div class="col-md-12">
  <div id="builder-basic" class="query-builder form-inline"><div id="builder-basic_group_0" class="rules-group-container">   <div class="rules-group-header">     <div class="btn-group pull-right group-actions">       <button type="button" class="btn btn-xs btn-success" data-add="rule">         <i class="glyphicon glyphicon-plus"></i> Add rule       </button>                <button type="button" class="btn btn-xs btn-success" data-add="group">           <i class="glyphicon glyphicon-plus-sign"></i> Add group         </button>                   </div>     <div class="btn-group group-conditions">                <label class="btn btn-xs btn-primary active">           <input type="radio" name="builder-basic_group_0_cond" value="AND"> AND         </label>                <label class="btn btn-xs btn-primary">           <input type="radio" name="builder-basic_group_0_cond" value="OR"> OR         </label>            </div>            <div class="error-container" data-toggle="tooltip"><i class="glyphicon glyphicon-warning-sign"></i></div>        </div>   <div class="rules-group-body">     <div class="rules-list"><div id="builder-basic_rule_0" class="rule-container">   <div class="rule-header">     <div class="btn-group pull-right rule-actions">       <button type="button" class="btn btn-xs btn-danger" data-delete="rule">         <i class="glyphicon glyphicon-remove"></i> Delete       </button>     </div>   </div>        <div class="error-container" data-toggle="tooltip"><i class="glyphicon glyphicon-warning-sign"></i></div>      <div class="rule-filter-container"> <select class="form-control" name="builder-basic_rule_0_filter">        <option value="-1">------</option>                <option value="name">Name</option>             <option value="category">Category</option>             <option value="in_stock">In stock</option>             <option value="price">Price</option>             <option value="id">Identifier</option>       </select></div>   <div class="rule-operator-container">  <select class="form-control " name="builder-basic_rule_0_operator">             <option value="equal">equal</option>             <option value="not_equal">not equal</option>             <option value="in">in</option>             <option value="not_in">not in</option>             <option value="less">less</option>             <option value="less_or_equal">less or equal</option>             <option value="greater">greater</option>             <option value="greater_or_equal">greater or equal</option>             <option value="between">between</option>             <option value="not_between">not between</option>             <option value="is_null">is null</option>             <option value="is_not_null">is not null</option>       </select></div>   <div class="rule-value-container"><input class="form-control" type="number" name="builder-basic_rule_0_value_0" step="0.01" min="0"></div> </div><div id="builder-basic_group_1" class="rules-group-container">   <div class="rules-group-header">     <div class="btn-group pull-right group-actions">       <button type="button" class="btn btn-xs btn-success" data-add="rule">         <i class="glyphicon glyphicon-plus"></i> Add rule       </button>                <button type="button" class="btn btn-xs btn-success" data-add="group">           <i class="glyphicon glyphicon-plus-sign"></i> Add group         </button>                       <button type="button" class="btn btn-xs btn-danger" data-delete="group">           <i class="glyphicon glyphicon-remove"></i> Delete         </button>            </div>     <div class="btn-group group-conditions">                <label class="btn btn-xs btn-primary">           <input type="radio" name="builder-basic_group_1_cond" value="AND"> AND         </label>                <label class="btn btn-xs btn-primary active">           <input type="radio" name="builder-basic_group_1_cond" value="OR"> OR         </label>            </div>            <div class="error-container" data-toggle="tooltip"><i class="glyphicon glyphicon-warning-sign"></i></div>        </div>   <div class="rules-group-body">     <div class="rules-list"><div id="builder-basic_rule_1" class="rule-container">   <div class="rule-header">     <div class="btn-group pull-right rule-actions">       <button type="button" class="btn btn-xs btn-danger" data-delete="rule">         <i class="glyphicon glyphicon-remove"></i> Delete       </button>     </div>   </div>        <div class="error-container" data-toggle="tooltip"><i class="glyphicon glyphicon-warning-sign"></i></div>      <div class="rule-filter-container"> <select class="form-control" name="builder-basic_rule_1_filter">        <option value="-1">------</option>                <option value="name">Name</option>             <option value="category">Category</option>             <option value="in_stock">In stock</option>             <option value="price">Price</option>             <option value="id">Identifier</option>       </select></div>   <div class="rule-operator-container">  <select class="form-control " name="builder-basic_rule_1_operator">             <option value="equal">equal</option>             <option value="not_equal">not equal</option>             <option value="in">in</option>             <option value="not_in">not in</option>             <option value="is_null">is null</option>             <option value="is_not_null">is not null</option>       </select></div>   <div class="rule-value-container"><select class="form-control" name="builder-basic_rule_1_value_0">                <option value="1">Books</option>             <option value="2">Movies</option>             <option value="3">Music</option>             <option value="4">Tools</option>             <option value="5">Goodies</option>             <option value="6">Clothes</option>       </select></div> </div><div id="builder-basic_rule_2" class="rule-container">   <div class="rule-header">     <div class="btn-group pull-right rule-actions">       <button type="button" class="btn btn-xs btn-danger" data-delete="rule">         <i class="glyphicon glyphicon-remove"></i> Delete       </button>     </div>   </div>        <div class="error-container" data-toggle="tooltip"><i class="glyphicon glyphicon-warning-sign"></i></div>      <div class="rule-filter-container"> <select class="form-control" name="builder-basic_rule_2_filter">        <option value="-1">------</option>                <option value="name">Name</option>             <option value="category">Category</option>             <option value="in_stock">In stock</option>             <option value="price">Price</option>             <option value="id">Identifier</option>       </select></div>   <div class="rule-operator-container">  <select class="form-control " name="builder-basic_rule_2_operator">             <option value="equal">equal</option>             <option value="not_equal">not equal</option>             <option value="in">in</option>             <option value="not_in">not in</option>             <option value="is_null">is null</option>             <option value="is_not_null">is not null</option>       </select></div>   <div class="rule-value-container"><select class="form-control" name="builder-basic_rule_2_value_0">                <option value="1">Books</option>             <option value="2">Movies</option>             <option value="3">Music</option>             <option value="4">Tools</option>             <option value="5">Goodies</option>             <option value="6">Clothes</option>       </select></div> </div></div>   </div> </div></div>   </div> </div></div>

  <div class="btn-group">
    <button class="btn btn-warning reset" data-target="basic">Reset</button>
    <button class="btn btn-success set-json" data-target="basic">Set rules</button>
    <button class="btn btn-primary parse-json" data-target="basic">Get rules</button>
  </div>
</div>


<script>
  // https://querybuilder.js.org/plugins.html#import-export

  // https://querybuilder.js.org/demo.html

  //$('#builder').queryBuilder('methodName', param_1, param_2);
  //$('#builder')[0].queryBuilder.methodName(param_1, param_2);

  $('#builder').queryBuilder({
      // filters: [... ],
      plugins: {
          'bt-tooltip-errors': { delay: 100 },
          'sortable': null
      }
  });
</script>