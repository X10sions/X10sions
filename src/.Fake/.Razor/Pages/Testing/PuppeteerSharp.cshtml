@using PuppeteerSharp
<h1>https://github.com/hardkoded/puppeteer-sharp</h1>

https://github.com/hardkoded/puppeteer-sharp

@{
  async Task TakeScreenshot(string outputFile) {
    using var browserFetcher = new BrowserFetcher();
    await browserFetcher.DownloadAsync();
    await using var browser = await Puppeteer.LaunchAsync(
        new LaunchOptions { Headless = true });
    await using var page = await browser.NewPageAsync();
    await page.GoToAsync("http://www.google.com");
    await page.SetViewportAsync(new ViewPortOptions {
          Width = 500,
          Height = 500
        });

    await page.ScreenshotAsync(outputFile);
  }

  async Task GeneratePdfFiles(string outputFile) {
    using var browserFetcher = new BrowserFetcher();
    await browserFetcher.DownloadAsync();
    await using var browser = await Puppeteer.LaunchAsync(new LaunchOptions { Headless = true });
    await using var page = await browser.NewPageAsync();
    await page.GoToAsync("http://www.google.com"); // In case of fonts being loaded from a CDN, use WaitUntilNavigation.Networkidle0 as a second param.
    await page.EvaluateExpressionHandleAsync("document.fonts.ready"); // Wait for fonts to be loaded. Omitting this might result in no text rendered in pdf.
    await page.PdfAsync(outputFile);
  }

  async Task InjectHtml(Browser browser) {
    await using var page = await browser.NewPageAsync();
    await page.SetContentAsync("<div>My Receipt</div>");
    var result = await page.GetContentAsync();
  }

  async Task AwaitJavascript(Browser browser) {
    await using var page = await browser.NewPageAsync();
    var seven = await page.EvaluateExpressionAsync<int>("4 + 3");
    var someObject = await page.EvaluateFunctionAsync<dynamic>("(value) => ({a: value})", 5);
    Console.WriteLine(someObject.a);
  }

  async Task WaitForSelector(Browser browser, string outputFile) {
    using (var page = await browser.NewPageAsync()) {
      await page.GoToAsync("http://www.spapage.com");
      await page.WaitForSelectorAsync("div.main-content");
      await page.PdfAsync(outputFile);
    }
  }

  async Task WaitForFunction(Browser browser) {
    using (var page = await browser.NewPageAsync()) {
      await page.GoToAsync("http://www.spapage.com");
      var watchDog = page.WaitForFunctionAsync("()=> window.innerWidth < 100");
      await page.SetViewportAsync(new ViewPortOptions { Width = 50, Height = 50 });
      await watchDog;
    }
  }

  async Task ConnectToRemoteBrowser(string apikey) {
    var options = new ConnectOptions() {
          BrowserWSEndpoint = $"wss://www.externalbrowser.io?token={apikey}"
        };
    var url = "https://www.google.com/";
    using (var browser = await PuppeteerSharp.Puppeteer.ConnectAsync(options)) {
      using (var page = await browser.NewPageAsync()) {
        await page.GoToAsync(url);
        await page.PdfAsync("wot.pdf");
      }
    }
  }

}