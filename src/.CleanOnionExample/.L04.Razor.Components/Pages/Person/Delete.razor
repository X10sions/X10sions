@page "/person/delete/{Id}"
@using CleanOnionExample.Data.Entities
@inject HttpClient http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<h2>Delete Person</h2>
@if (person != null) {
  <p>Are you sure you want to delete this person with Name: <b>@person.FirstName @person.LastName</b></p>
  <div class="row">
    <table class="table">
      <tr>
        <td>Name</td>
        <td>@person.FirstName @person.LastName</td>
      </tr>
      <tr>
        <td>Email</td>
        <td>@person.Email</td>
      </tr>
      <tr>
        <td>Mobile Number</td>
        <td>@person.MobileNo</td>
      </tr>
    </table>
  </div>
}
<div class="row">
  <div class="col-md-4">
    <div class="form-group">
      <input type="button" class="btn btn-primary" @onclick="@DoDelete" value="Delete" />
      <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
    </div>
  </div>
</div>
@code {
  [Parameter] public string Id { get; set; }

  Person.UpdateCommand person;//= new Person.UpdateCommand();
  protected override async Task OnInitializedAsync() {
    person = await http.GetFromJsonAsync<Person.UpdateCommand >("api/person/" + Id);
  }

  protected async Task DoDelete() {
    var response = await http.DeleteAsync("api/Person/" + Id);
    bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
    if (deleteResponse) {
      await jsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
      navigationManager.NavigateTo("personlist");
    }

  }
  void Cancel() {
    navigationManager.NavigateTo("personlist");
  }

}