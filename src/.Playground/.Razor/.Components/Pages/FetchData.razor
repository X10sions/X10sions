@page "/fetchdata"
@inject HttpClient Http
@using Common.Features.DummyFakeExamples.WeatherForecast
@using X10sions.Playground.Razor
@inject WeatherForecastService ForecastService
@inject AppSettings appSettings
<PageTitle>Weather forecast</PageTitle>
<h1>Weather forecast</h1>
<p>This component demonstrates fetching data from the server.</p>
@if (forecasts == null) {
  <p><em>Loading...</em></p>
} else {
  <table class="table">
    <thead>
      <tr>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var forecast in forecasts) {
        <tr>
          <td>@forecast.Date.ToShortDateString()</td>
          <td>@forecast.TemperatureC</td>
          <td>@forecast.TemperatureF</td>
          <td>@forecast.Summary</td>
        </tr>
      }
    </tbody>
  </table>
}

@{
  //var baseUrl = $"{Environment.b. this.Request.Scheme}://{this.Request.Host.Value.ToString()}{this.Request.PathBase.Value.ToString()}";

  //Http.BaseAddress = new Uri("https://localhost:44317");
}
<ol>
  <li>@Http.BaseAddress</li>
  <li>@appSettings.AppTitle</li>
  <li>@appSettings.AppBaseAddress</li>
  <li>@appSettings.AppContentPath</li>
</ol>
@code {
  private WeatherForecast[]? forecasts;

  protected override async Task OnInitializedAsync() {
    var uri = new Uri($"{appSettings.AppBaseAddress}{appSettings.AppContentPath}/sample-data/weather.json");
    //var httpForecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(uri);
    var serviceForecasts = await ForecastService.GetForecastAsync(DateTime.Now.ToDateOnly());
    //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(uri);
    //forecasts = httpForecasts ;
    forecasts = serviceForecasts;
    //forecasts = httpForecasts?.Union(serviceForecasts);
  }

}
