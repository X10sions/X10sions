using Microsoft.Net.Http.Headers;

namespace Microsoft.AspNetCore.Http {
  public static class IHeaderDictionaryExtensions {
    public static string? Accept(this IHeaderDictionary headers) => headers[HeaderNames.Accept];
    public static string? AcceptCharset(this IHeaderDictionary headers) => headers[HeaderNames.AcceptCharset];
    public static string? AcceptEncoding(this IHeaderDictionary headers) => headers[HeaderNames.AcceptEncoding];
    public static string? AcceptLanguage(this IHeaderDictionary headers) => headers[HeaderNames.AcceptLanguage];
    public static string? AcceptRanges(this IHeaderDictionary headers) => headers[HeaderNames.AcceptRanges];
    public static string? AccessControlAllowCredentials(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlAllowCredentials];
    public static string? AccessControlAllowHeaders(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlAllowHeaders];
    public static string? AccessControlAllowMethods(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlAllowMethods];
    public static string? AccessControlAllowOrigin(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlAllowOrigin];
    public static string? AccessControlExposeHeaders(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlExposeHeaders];
    public static string? AccessControlMaxAge(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlMaxAge];
    public static string? AccessControlRequestHeaders(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlRequestHeaders];
    public static string? AccessControlRequestMethod(this IHeaderDictionary headers) => headers[HeaderNames.AccessControlRequestMethod];
    public static string? Age(this IHeaderDictionary headers) => headers[HeaderNames.Age];
    public static string? Allow(this IHeaderDictionary headers) => headers[HeaderNames.Allow];
    [Obsolete] public static string? Authority(this IHeaderDictionary headers) => headers[HeaderNames.Authority];
    public static string? Authorization(this IHeaderDictionary headers) => headers[HeaderNames.Authorization];
    public static string? CacheControl(this IHeaderDictionary headers) => headers[HeaderNames.CacheControl];
    public static string? Connection(this IHeaderDictionary headers) => headers[HeaderNames.Connection];
    public static string? ContentDisposition(this IHeaderDictionary headers) => headers[HeaderNames.ContentDisposition];
    public static string? ContentEncoding(this IHeaderDictionary headers) => headers[HeaderNames.ContentEncoding];
    public static string? ContentLanguage(this IHeaderDictionary headers) => headers[HeaderNames.ContentLanguage];
    public static string? ContentLength(this IHeaderDictionary headers) => headers[HeaderNames.ContentLength];
    public static string? ContentLocation(this IHeaderDictionary headers) => headers[HeaderNames.ContentLocation];
    public static string? ContentMD5(this IHeaderDictionary headers) => headers[HeaderNames.ContentMD5];
    public static string? ContentRange(this IHeaderDictionary headers) => headers[HeaderNames.ContentRange];
    public static string? ContentSecurityPolicy(this IHeaderDictionary headers) => headers[HeaderNames.ContentSecurityPolicy];
    public static string? ContentSecurityPolicyReportOnly(this IHeaderDictionary headers) => headers[HeaderNames.ContentSecurityPolicyReportOnly];
    public static string? ContentType(this IHeaderDictionary headers) => headers[HeaderNames.ContentType];
    public static string? Cookie(this IHeaderDictionary headers) => headers[HeaderNames.Cookie];
    public static string? Date(this IHeaderDictionary headers) => headers[HeaderNames.Date];
    public static string? ETag(this IHeaderDictionary headers) => headers[HeaderNames.ETag];
    public static string? Expect(this IHeaderDictionary headers) => headers[HeaderNames.Expect];
    public static string? Expires(this IHeaderDictionary headers) => headers[HeaderNames.Expires];
    public static string? From(this IHeaderDictionary headers) => headers[HeaderNames.From];
    public static string? Host(this IHeaderDictionary headers) => headers[HeaderNames.Host];
    public static string? IfMatch(this IHeaderDictionary headers) => headers[HeaderNames.IfMatch];
    public static string? IfModifiedSince(this IHeaderDictionary headers) => headers[HeaderNames.IfModifiedSince];
    public static string? IfNoneMatch(this IHeaderDictionary headers) => headers[HeaderNames.IfNoneMatch];
    public static string? IfRange(this IHeaderDictionary headers) => headers[HeaderNames.IfRange];
    public static string? IfUnmodifiedSince(this IHeaderDictionary headers) => headers[HeaderNames.IfUnmodifiedSince];
    public static string? LastModified(this IHeaderDictionary headers) => headers[HeaderNames.LastModified];
    public static string? Location(this IHeaderDictionary headers) => headers[HeaderNames.Location];
    public static string? MaxForwards(this IHeaderDictionary headers) => headers[HeaderNames.MaxForwards];
    [Obsolete] public static string? Method(this IHeaderDictionary headers) => headers[HeaderNames.Method];
    public static string? Origin(this IHeaderDictionary headers) => headers[HeaderNames.Origin];
    [Obsolete] public static string? Path(this IHeaderDictionary headers) => headers[HeaderNames.Path];
    public static string? Pragma(this IHeaderDictionary headers) => headers[HeaderNames.Pragma];
    public static string? ProxyAuthenticate(this IHeaderDictionary headers) => headers[HeaderNames.ProxyAuthenticate];
    public static string? ProxyAuthorization(this IHeaderDictionary headers) => headers[HeaderNames.ProxyAuthorization];
    public static string? Range(this IHeaderDictionary headers) => headers[HeaderNames.Range];
    public static string? Referer(this IHeaderDictionary headers) => headers[HeaderNames.Referer];
    public static string? RetryAfter(this IHeaderDictionary headers) => headers[HeaderNames.RetryAfter];
    [Obsolete] public static string? Scheme(this IHeaderDictionary headers) => headers[HeaderNames.Scheme];
    public static string? Server(this IHeaderDictionary headers) => headers[HeaderNames.Server];
    public static string? SetCookie(this IHeaderDictionary headers) => headers[HeaderNames.SetCookie];
    [Obsolete] public static string? Status(this IHeaderDictionary headers) => headers[HeaderNames.Status];
    public static string? StrictTransportSecurity(this IHeaderDictionary headers) => headers[HeaderNames.StrictTransportSecurity];
    public static string? TE(this IHeaderDictionary headers) => headers[HeaderNames.TE];
    public static string? Trailer(this IHeaderDictionary headers) => headers[HeaderNames.Trailer];
    public static string? TransferEncoding(this IHeaderDictionary headers) => headers[HeaderNames.TransferEncoding];
    public static string? Upgrade(this IHeaderDictionary headers) => headers[HeaderNames.Upgrade];
    public static string? UserAgent(this IHeaderDictionary headers) => headers[HeaderNames.UserAgent];
    public static string? Vary(this IHeaderDictionary headers) => headers[HeaderNames.Vary];
    public static string? Via(this IHeaderDictionary headers) => headers[HeaderNames.Via];
    public static string? Warning(this IHeaderDictionary headers) => headers[HeaderNames.Warning];
    public static string? WebSocketSubProtocols(this IHeaderDictionary headers) => headers[HeaderNames.WebSocketSubProtocols];
    public static string? WWWAuthenticate(this IHeaderDictionary headers) => headers[HeaderNames.WWWAuthenticate];
  }
}